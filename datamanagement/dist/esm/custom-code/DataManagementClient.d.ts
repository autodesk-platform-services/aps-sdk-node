import { SDKManager } from "autodesk-sdkmanager";
import { CommandsApi, HubsApi, ItemsApi, ProjectsApi, FoldersApi, VersionsApi, GetFolderRelationshipsRefsFilterRefTypeEnum, GetFolderRelationshipsRefsFilterDirectionEnum, GetItemRelationshipsRefsFilterRefTypeEnum, GetItemRelationshipsRefsFilterDirectionEnum, GetVersionRelationshipsRefsFilterRefTypeEnum, GetVersionRelationshipsRefsFilterDirectionEnum } from "../api";
import { Command, CommandPayload, Download, DownloadDetails, DownloadFormats, DownloadPayload, Downloads, Folder, FolderContents, FolderPayload, FolderRefs, Hub, Hubs, Item, ItemPayload, ItemTip, Job, ModifyFolderPayload, ModifyItemPayload, ModifyVersionPayload, Project, Projects, Refs, RelationshipLinks, RelationshipRefs, RelationshipRefsPayload, Search, StoragePayload, TopFolders, Version, VersionDetails, VersionPayload, Versions } from "../model";
export declare class DataManagementClient {
    commandsApi: CommandsApi;
    foldersApi: FoldersApi;
    hubsApi: HubsApi;
    itemsApi: ItemsApi;
    projectsApi: ProjectsApi;
    versionsApi: VersionsApi;
    constructor(sdkManager: SDKManager);
    PostCommandAsync(accessToken: string | null, projectId: string, xUserId: string | null, commandPayload: CommandPayload): Promise<Command>;
    GetFolderAsync(accessToken: string | null, projectId: string, folderId: string, ifModifiedSince?: string | null, xUserId?: string | null): Promise<Folder>;
    GetFolderContentsAsync(accessToken: string | null, projectId: string, folderId: string, xUserId?: string | null, filterType?: string[] | null, filterId?: string[] | null, filterExtensionType?: string[] | null, filterLastModifiedTimeRollup?: string[] | null, pageNumber?: number | null, pageLimit?: number | null, includeHidden?: boolean | null): Promise<FolderContents>;
    GetFolderParentAsync(accessToken: string | null, projectId: string, folderId: string, xUserId?: string | null, throwOnError?: boolean): Promise<Folder>;
    GetFolderRefsAsync(accessToken: string | null, projectId: string, folderId: string, xUserId?: string | null, filterType?: string | null, filterId?: string | null, filterExtensionType?: string | null): Promise<FolderRefs>;
    GetFolderRelationshipsLinksAsync(accessToken: string | null, projectId: string, folderId: string, xUserId?: string | null): Promise<RelationshipLinks>;
    GetFolderRelationshipsRefsAsync(accessToken: string | null, folderId: string, projectId: string, xUserId: string | null, filterType: string[] | null, filterId: string[] | null, filterRefType: GetFolderRelationshipsRefsFilterRefTypeEnum, filterDirection: GetFolderRelationshipsRefsFilterDirectionEnum, filterExtensionType?: string[] | null): Promise<RelationshipRefs>;
    GetFolderSearchAsync(accessToken: string | null, projectId: string, folderId: string, filter?: string | null, pageNumber?: number | null): Promise<Search>;
    PatchFolderAsync(accessToken: string | null, projectId: string, folderId: string, xUserId: string | null, modifyFolderPayload: ModifyFolderPayload): Promise<Folder>;
    CreateFolderAsync(accessToken: string | null, projectId: string, xUserId?: string | null, folderPayload?: FolderPayload | null): Promise<Folder>;
    CreateFolderRelationshipsRefAsync(accessToken: string | null, folderId: string, projectId: string, xUserId?: string | null, relationshipRefsPayload?: RelationshipRefsPayload | null): Promise<Response>;
    GetHubAsync(accessToken: string | null, hubId: string, xUserId?: string | null): Promise<Hub>;
    GetHubsAsync(accessToken?: string | null, xUserId?: string | null, filterId?: string[] | null, filterName?: string | null, filterExtensionType?: string[] | null): Promise<Hubs>;
    GetItemAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null, includePathInProject?: boolean | null): Promise<Item>;
    GetItemParentFolderAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null): Promise<Folder>;
    GetItemRefsAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null, filterType?: string[] | null, filterId?: string[] | null, filterExtensionType?: string[] | null): Promise<Refs>;
    GetItemRelationshipsLinksAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null): Promise<RelationshipLinks>;
    GetItemRelationshipsRefsAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null, filterType?: string[] | null, filterId?: string[] | null, filterRefType?: GetItemRelationshipsRefsFilterRefTypeEnum | null, filterDirection?: GetItemRelationshipsRefsFilterDirectionEnum | null, filterExtensionType?: string[] | null): Promise<RelationshipRefs>;
    GetItemTipAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null): Promise<ItemTip>;
    GetItemVersionsAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null, filterId?: string[] | null, filterExtensionType?: string[] | null, filterVersionNumber?: (number | null)[] | null, pageNumber?: number | null, pageLimit?: number | null): Promise<Versions>;
    PatchItemAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null, modifyItemPayload?: ModifyItemPayload | null): Promise<Item>;
    CreateItemAsync(accessToken: string | null, projectId: string, xUserId?: string | null, copyFrom?: string | null, itemPayload?: ItemPayload | null): Promise<Item>;
    CreateItemRelationshipsRefAsync(accessToken: string | null, projectId: string, itemId: string, xUserId?: string | null, relationshipRefsPayload?: RelationshipRefsPayload | null): Promise<Response>;
    GetDownloadAsync(accessToken: string, projectId: string, downloadId: string, xUserId?: string | null): Promise<Download>;
    GetDownloadJobAsync(accessToken: string, projectId: string, jobId: string, xUserId?: string | null): Promise<Job>;
    CreateDownloadAsync(accessToken: string, projectId: string, xUserId?: string | null, downloadPayload?: DownloadPayload): Promise<DownloadDetails>;
    GetHubProjectsAsync(accessToken: string | null, hubId: string, xUserId?: string | undefined, filterId?: string[] | undefined, filterExtensionType?: string[] | undefined, pageNumber?: number | undefined, pageLimit?: number | undefined): Promise<Projects>;
    GetProjectAsync(accessToken: string | null, hubId: string, projectId: string, xUserId?: string | undefined): Promise<Project>;
    GetProjectHubAsync(accessToken: string | null, hubId: string, projectId: string, xUserId?: string | undefined): Promise<Hub>;
    GetProjectTopFoldersAsync(accessToken: string | null, hubId: string, projectId: string, xUserId?: string | undefined, excludeDeleted?: boolean | undefined, projectFilesOnly?: boolean | undefined): Promise<TopFolders>;
    CreateStorageAsync(accessToken: string | null, projectId: string, xUserId?: string | null, storagePayload?: StoragePayload): Promise<Storage>;
    GetVersionAsync(accessToken: string | null, projectId: string, versionId: string, xUserId?: string): Promise<Version>;
    GetVersionDownloadFormatsAsync(accessToken: string | null, projectId: string, versionId: string, xUserId?: string): Promise<DownloadFormats>;
    GetVersionDownloadsAsync(accessToken: string | null, projectId: string, versionId: string, xUserId?: string, filterFormatFileType?: string[] | null): Promise<Downloads>;
    GetVersionItemAsync(accessToken: string | null, projectId: string, versionId: string, xUserId?: string): Promise<Item>;
    GetVersionRefsAsync(accessToken: string | null, projectId: string, versionId: string, xUserId?: string, filterType?: string[] | null, filterId?: string[] | null, filterExtensionType?: string[] | null): Promise<Refs>;
    GetVersionRelationshipsLinksAsync(accessToken: string | null, projectId: string, versionId: string, xUserId?: string): Promise<RelationshipLinks>;
    GetVersionRelationshipsRefsAsync(accessToken: string | null, projectId: string, versionId: string, xUserId?: string, filterType?: string[] | null, filterId?: string[] | null, filterRefType?: GetVersionRelationshipsRefsFilterRefTypeEnum | null, filterDirection?: GetVersionRelationshipsRefsFilterDirectionEnum | null, filterExtensionType?: string[] | null): Promise<RelationshipRefs>;
    PatchVersionAsync(accessToken: string | null, projectId: string, versionId: string, modifyVersionPayload?: ModifyVersionPayload): Promise<Version>;
    CreateVersionAsync(accessToken: string | null, projectId: string, xUserId?: string, copyFrom?: string | null, versionPayload?: VersionPayload): Promise<VersionDetails>;
    CreateVersionRelationshipsRefAsync(accessToken: string | null, projectId: string, versionId: string, xUserId?: string, relationshipRefsPayload?: RelationshipRefsPayload | null): Promise<Version>;
}
